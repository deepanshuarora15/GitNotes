1. You can change the most recent commit:
   a. Either by editing the commit message
   b. Or changing the project files
2. This creates a new SHA-1
3. We can modify the staging area and ammend a commit.
4. Optionally we can use the --no-edit option to reuse the reuse the previous commit message.
   git commit --amend --no-edit
5. Interactive rebase lets you edit commits using commands
   a. The commits can belong to any branch
   b. The commit history is changed - do not use for shared commits
6. git rebase -i <after-this-commit>
   Commits in the current branch after <after-this-commit> are listed in an editor and cna be modified
7. Squashing a commit:
   a. Applies a newer (squashed) commit to an older commit
   b. Combines the commit messages
   c. Removes the newer commit
8. Squash vs delete:
   Combine this commit with the older commit, creating a single commit
   The work of both the commits included
9. Delete: No changes from this commit are applied
   a. The diff is thrown out
   b. The work of this commit is lost
   c. Greater chance of a merge conflict
10. Squash merges:
    a. Merges the tip of the feature branch, onto the tip of the base branch. There is a chance of merge conflict
    b. Places the result in a staging area
    c. The result can then be committed 
11. What is the result of a "git merge --squash featureX" command?
    Ans: File(s) added to the staging area.